[ { "title": "The intricacies of a laravel project setup with sail under WSL2", "url": "/posts/laravel-sail-setup-intricacies/", "categories": "Laravel, Sail, WSL2", "tags": "laravel, sail, wsl2, dnsproblem, dns", "date": "2022-03-30 00:00:00 +0200", "snippet": "I needed to create a laravel blog motor for one of my interviews in the past 2 weeks, and even to just get started I bumped into some problems.To be a little bit more specific, the problem was that...", "content": "I needed to create a laravel blog motor for one of my interviews in the past 2 weeks, and even to just get started I bumped into some problems.To be a little bit more specific, the problem was that the WSL2 DNS settings are really vaguely implemented, and I am quite surprised that I didn’t find more complaint about it. Basically 2-3 issues and posts which I was able to find.So if you managed to get here due to the same errors I got, this post will help.The command which shall workTo get started with a laravel project even the new Laravel 9 documentation says that use sail under WSL2 to get started, and this is big a relief for me, that even the laravel community jumped into the microservice architecture-based development. No more XAMPP and php version management, thank god times are changing.So the official Laravel 9 docs suggests to install WSL2 and Docker Desktop. To be fair I had a WSL2 Ubuntu 20.04 LTS with a docker-ce and docker-cli installed already and due to the last year’s licensing misery of the Docker Desktop I try to stay away from it.This means that according to the docs, one curl command and I shall be ready to go:curl -s \"https://laravel.build/little-laravel-blog/?with=pgsql,selenium\" | bashWith the project name little-laravel-blog, I went with the postgres and selenium based service setup, because for a blog motor I won’t need anything more.The CLI output was the following: _ _| | | || | __ _ _ __ __ ___ _____| || | / _` | '__/ _` \\ \\ / / _ \\ || |___| (_| | | | (_| |\\ V / __/ ||______\\__,_|_| \\__,_| \\_/ \\___|_|Warning: TTY mode requires /dev/tty to be read/writable. Creating a \"laravel/laravel\" project at \"./example-app\" https://repo.packagist.org could not be fully loaded (curl error 6 while downloading https://repo.packagist.org/packages.json: Could not resolve host: repo.packagist.org), package information was loaded from the local cache and may be out of date The following exception probably indicates you have misconfigured DNS resolver(s) [Composer\\Downloader\\TransportException] curl error 6 while downloading https://repo.packagist.org/p2/laravel/laravel.json: Could not resolve host: repo.packagist.org create-project [-s|--stability STABILITY] [--prefer-source] [--prefer-dist] [--prefer-install PREFER-INSTALL] [--repository REPOSITORY] [--repository-url REPOSITORY-URL] [--add-repository] [--dev] [--no-dev] [--no-custom-installers] [--no-scripts] [--no-progress] [--no-secure-http] [--keep-vcs] [--remove-vcs] [--no-install] [--ignore-platform-req IGNORE-PLATFORM-REQ] [--ignore-platform-reqs] [--ask] [--] [&lt;package&gt;] [&lt;directory&gt;] [&lt;version&gt;]bash: line 16: cd: example-app: No such file or directoryNo directory created so what happened?The DNS resolver errorThe output suggests that the problem is probably with my dns setup.When I checked what are the commands I try to run exactly and entered the curled url in a browser, it came out that it just runs laravelsail/php81-composer:latest container with an artisan command.So I thought that maybe I will try to run the command myself and reproduce the issue, and I managed to do it.docker run -dti -v \"$(pwd)\":/opt --name sail-container -w /opt laravelsail/php81-composer:latestroot@7650f724374c:/opt# laravel new little-laravel-blog _ _| | | || | __ _ _ __ __ ___ _____| || | / _` | '__/ _` \\ \\ / / _ \\ || |___| (_| | | | (_| |\\ V / __/ ||______\\__,_|_| \\__,_| \\_/ \\___|_|Creating a \"laravel/laravel\" project at \"./little-laravel-blog\"https://repo.packagist.org could not be fully loaded (curl error 6 while downloading https://repo.packagist.org/packages.json: Could not resolve host: repo.packagist.org), package information was loaded from the local cache and may be out of dateThe following exception probably indicates you have misconfigured DNS resolver(s) [Composer\\Downloader\\TransportException] curl error 6 while downloading https://repo.packagist.org/p2/laravel/laravel.json: Could not resolve host: repo.pac kagist.orgcreate-project [-s|--stability STABILITY] [--prefer-source] [--prefer-dist] [--prefer-install PREFER-INSTALL] [--repository REPOSITORY] [--repository-url REPOSITORY-URL] [--add-repository] [--dev] [--no-dev] [--no-custom-installers] [--no-scripts] [--no-progress] [--no-secure-http] [--keep-vcs] [--remove-vcs] [--no-install] [--ignore-platform-req IGNORE-PLATFORM-REQ] [--ignore-platform-reqs] [--ask] [--] [&lt;package&gt;] [&lt;directory&gt;] [&lt;version&gt;]So in the meantime I checked the dns settings of the container:root@7650f724374c:/opt# cat /etc/resolv.conf# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:# [network]# generateResolvConf = falsenameserver 172.17.160.1root@7650f724374c:/opt# exitWhich does not seemed right, this IP address seemed weird, and it came out that the container is initialized with the WSL’s dns servers, and indeed, this was the dns configuration of my Ubuntu 20.04, so how to change it?After some digging into the docker networking documentation I started the container again with the 8.8.8.8 dns flag:docker run -dti -v \"$(pwd)\":/opt --name sail-container --dns 8.8.8.8 -w /opt laravelsail/php81-composer:latestAnd voilá, everything went fine now.Sun Mar 20 12:53:58 0 hajnalmt@DESKTOP-N55OACK:~/owndocker exec -it sail-container /bin/bashroot@6c5393281f67:/opt# cat /etc/resolv.confnameserver 8.8.8.8root@6c5393281f67:/opt# lshajnalmt-blog hajnalmt-hosting o1g.ciroot@6c5393281f67:/opt# cat /etc/resolv.conf ^Croot@6c5393281f67:/opt# laravel new little-laravel-blog _ _| | | || | __ _ _ __ __ ___ _____| || | / _` | '__/ _` \\ \\ / / _ \\ || |___| (_| | | | (_| |\\ V / __/ ||______\\__,_|_| \\__,_| \\_/ \\___|_|Creating a \"laravel/laravel\" project at \"./little-laravel-blog\"Info from https://repo.packagist.org: #StandWithUkraineInstalling laravel/laravel (v9.1.2) - Downloading laravel/laravel (v9.1.2) - Installing laravel/laravel (v9.1.2): Extracting archiveCreated project in /opt/little-laravel-blog&gt; @php -r \"file_exists('.env') || copy('.env.example', '.env');\"Loading composer repositories with package informationInfo from https://repo.packagist.org: #StandWithUkraineUpdating dependenciesLock file operations: 108 installs, 0 updates, 0 removals - Locking brick/math (0.9.3) - Locking dflydev/dot-access-data (v3.0.1) - Locking doctrine/inflector (2.0.4) - Locking doctrine/instantiator (1.4.1) - Locking doctrine/lexer (1.2.3) - Locking dragonmantank/cron-expression (v3.3.1)...Use the `composer fund` command to find out more!&gt; @php artisan vendor:publish --tag=laravel-assets --ansi --forceNo publishable resources for tag [laravel-assets].Publishing complete.&gt; @php artisan key:generate --ansiApplication key set successfully.Application ready! Build something amazing.Editing the compose file tooDespite solving this issue, the problem still came up when I tried the sail up command.My first attempt was to edit my wsl2 dns configuration (which is the main reason this whole laravel setup just doesn’t work at a glance), but after several try, I just gave up. I have tried every method, the internet suggested. I even crashed wsl with one of my attempts, but I couldn’t overcome the issue that the dns configuration gets generated on every new restart, so either your configuration will be lost after restarting the terminal, or there is a possibility, that you will mess up your wsl2 dns configuration, which is not fun.The permanent solution is just to edit your docker-compose.yml file to use the google dns.# For more information: https://laravel.com/docs/sailversion: \"3\"services: laravel.test: build: context: ./vendor/laravel/sail/runtimes/8.1 dockerfile: Dockerfile args: WWWGROUP: \"${WWWGROUP}\" image: sail-8.1/app extra_hosts: - \"host.docker.internal:host-gateway\" dns: 8.8.8.8 # I ADDED THIS LINE ports: - \"${APP_PORT:-80}:80\" environment: WWWUSER: \"${WWWUSER}\" LARAVEL_SAIL: 1 XDEBUG_MODE: \"${SAIL_XDEBUG_MODE:-off}\" XDEBUG_CONFIG: \"${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}\" volumes: - \".:/var/www/html\" # ...I basically added a dns entry to the laravel test service.I hope the post helped you, if you bumped into this same issue." }, { "title": "NIGNX proxy in Kubernetes for Sendgrid SSL click Tracking", "url": "/posts/kubernetes-sendgrid-service/", "categories": "Blogging, CV, Writing", "tags": "sendgrid, ssltracking, ssl, clicktracking, kubernetes, ingress", "date": "2022-03-15 00:00:00 +0100", "snippet": "Before I get into the article I want to thank tg44 (Gergő Törcsvári) who created the final configuration, check his blog too if you have some time.Sendgrid is an e-mail delivery service which my co...", "content": "Before I get into the article I want to thank tg44 (Gergő Törcsvári) who created the final configuration, check his blog too if you have some time.Sendgrid is an e-mail delivery service which my company is using to send e-mails.I won’t dive into its features, because its a quite common service, with great features, and a reasonable price. To understand this post you need to be familiar with Kubernetes, at least you need to know the concept of Ingresses and Services.IntroLast year we had a problem when we decieded to switch our Cluster from Rancher Cattle to Kubernetes.The e-mails contained https links, which we wanted to track (How many of them got clicked on etc.), and Sendgrid has an inbuilt feature called SSL click tracking, with a nice documentation.BasicsA normal click tracking can be set up with quite little knowledge, with an external domain (most of the cases), after the domain authentication and the link branding steps basically you are ready.Although there are some best pracices you are better to follow.SSL Click trackingWhen we are speaking about SSL click tracking, we want to route the https links appropriately to the sendgrid server and than to us seemlessly. The than to us part is done by sendgrid itself, so we need to focus on the first one. The documentation says to use CDN to manage the certificates, which is intriguing at least, and you need to pay for these services.The second paragraph says that the other way is to setup a custom ssl configuration, so I started to dive into it.So far when you set up the linkbranding you have already created the domain routing, with the CNAME domain entry setting: urlxxxx.yourdoamin.com to sendgrid.net.This is the url you will need into the upcoming tutorial. The task itself is to prepare a proxy which receives all the inbound traffic and forwards it to http://sendgrid.net or https://sendgrid.net in our case, which means in Kubernetes terms, to setup an ingress with a backend service.Ingress and serviceWe use an NGINX Ingress Controller with a cert-manager ClusterIssuer in our Kubernetes cluster, and most of the time this will be your case too, but to create an ingress we need to have a service first which it can point to, so we are starting with that.This stackoverflow post is really helpful to understand all of this.The Service just needs to forward traffic to an external DNS (sendgrid.net). Kubernetes has a solution for it, we can define an ExternalName type Service for this, which exactly does that.So the Service will look like this.apiVersion: v1kind: Servicemetadata: name: sendgrid-net namespace: sengrid-proxyspec: type: ExternalName externalName: sendgrid.net You need to create the sendgrid-proxy namespace of course kubectl create namespace sendgrid-proxy, or edit the namespace part.Now we are able to create the ingress. It will look like this:apiVersion: networking.k8s.io/v1kind: Ingressmetadata: annotations: cert-manager.io/cluster-issuer: letsencypt-prod nginx.ingress.kubernetes.io/proxy-body-size: \"0\" nginx.ingress.kubernetes.io/ssl-redirect: \"true\" nginx.ingress.kubernetes.io/upstream-vhost: \"urlxxxx.yourdoamin.com\" nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\" kubernetes.io/ingress.class: \"nginx\" name: sendgrid namespace: sengrid-proxyspec: rules: - host: urlxxxx.yourdoamin.com http: paths: - backend: service: name: sendgrid-net port: number: 443 path: / pathType: ImplementationSpecific tls: - hosts: - urlxxxx.yourdoamin.com secretName: urlxxxx.yourdoamin.comThis ingress uses the letsencypt-prod cert-manager, which can of course differ in your cluster, but apart from that, you need to edit the urlxxxx.yourdoamin.com lines only.Regarding about the nginx configuration the upstream-vhost annotation sets the proxy_set_header Host $host directive, which was pointed out in the sendgrid documentation that its needed.The proxy-body-size annotation will set the client_max_body_size nginx directive, which means that there won’t be any size checking on the requests.Furthermore the SSL redirection, and the https backend protocol annotations will ensure the HTTPS connection between the ingress and the Backend service.The final applicable one-file configuration is the following:apiVersion: v1kind: Namespacemetadata: name: sengrid-proxy---apiVersion: v1kind: Servicemetadata: name: sendgrid-net namespace: sengrid-proxyspec: type: ExternalName externalName: sendgrid.net---apiVersion: networking.k8s.io/v1kind: Ingressmetadata: annotations: cert-manager.io/cluster-issuer: letsencypt-prod nginx.ingress.kubernetes.io/proxy-body-size: \"0\" nginx.ingress.kubernetes.io/ssl-redirect: \"true\" nginx.ingress.kubernetes.io/upstream-vhost: \"urlxxxx.yourdoamin.com\" nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\" kubernetes.io/ingress.class: \"nginx\" name: sendgrid namespace: sengrid-proxyspec: rules: - host: urlxxxx.yourdoamin.com http: paths: - backend: service: name: sendgrid-net port: number: 443 path: / pathType: ImplementationSpecific tls: - hosts: - urlxxxx.yourdoamin.com secretName: urlxxxx.yourdoamin.comWith this configuration you will be able to create any external dns proxy in your Kubernetes Cluster too, so I hope this helps!" }, { "title": "How to write a cv in latex with moderncv template", "url": "/posts/how-to-write-a-modern-classic.cv/", "categories": "Blogging, CV, Writing", "tags": "writing, cv, latex, moderncv, gitlabicon, socialgitlab", "date": "2022-03-12 00:00:00 +0100", "snippet": "TLDR: Here is my new CV written in latex: English CV Hungarian CVThe source code link on Overleaf: Hajnal Mate CV.IntroToday I stumbled upon the task to refresh my CV and I decided that as a prog...", "content": "TLDR: Here is my new CV written in latex: English CV Hungarian CVThe source code link on Overleaf: Hajnal Mate CV.IntroToday I stumbled upon the task to refresh my CV and I decided that as a programmer I will use latex.I am pretty much on the opinion that a programmer shall learn Markdown and Latex, to be able to create appropriately formatted documentations.In the era of Microsoft Word files, which I just hate by instinct, this knowledge gives you whole new world, and what could be a better to practice than writing your own CV.Overleaf and the Moderncv templatePreviously I used Sharelatex both for my Diploma work, and my project Laboratory, which got rebranded to Overleaf, which is an online Latex documentation creater.It has a lot of benefits to use, but the biggest is that you don’t need to do the compilation by yourself, so you don’t need to setup the latex related environment on your machine, which is vaguely gruesome. An other cool feature is that it provides you a lot of templates to choose from: Overleaf templates. Search for the CV templates to get a nice grasp about what to choose from.Overleaf gives you these out of the box, with sharing, automatic template creation and history tracking. I went with the Modern CV template which is a little bit old template, but I liked the classical style of it.The new trend is that the new cv-s are not containing profile pictures, which I can live with, but I decieded to include it in my CV, and the template contained one too, so its fine I guess.To change the style from casual to classic you need to edit the \\moderncvstyle{casual} line to classic:\\moderncvstyle{classic}Social linksAfter my wife choose a picture (my choice wasn’t good enough, as she and my mother aggreed upon), I needed to add the availability.Filling the E-mail, Mobile, Github, Linkedin and extrainfo part won’t be too hard for you, basically you need to just insert your informations.The hard part came, when I wanted to insert my Gitlab profile link too.At first I tried to just add the gitlab link with the social command, but the cv then didn’t compiled at all.\\social[gitlab][https://gitlab.com/hajnalmt]{hajnalmt}This post helped to understand that the modercv template doesn’t know about the gitlab favicon and you need to add the symbol to the social command.You basically need to add the fontawesome to the template and create the new social command:% load fontawesome icons\\usepackage{fontawesome}% set the moderncv command for the Gitlab icon% create command if it does not exist\\providecommand*{\\gitlabsocialsymbol}{}% set command to \\faGitlab from fontawesome\\renewcommand*{\\gitlabsocialsymbol}{{\\scriptsize\\faGitlab}~}After the the template worked again and I got a nice gitlab icon next to my gitlab link.The restThe rest of the document is pretty straightforward, basically you need to fill up the CV with the informations.Be aware, that you are able to define new sections with the \\section{} command and create new cv entry item with \\cvitem{}{}, in the first paranthesis you can enter the year related informations and in the second one, you can enter the text itself. You can force a new line creation with the \\newline command, create bold text with the \\textbf{} and add additional space between the sections with the \\vspace{} command.That’s all, I wish happy latex usage, and cv writing for you!" }, { "title": "Starting at somewhere", "url": "/posts/about-my-blog/", "categories": "Blogging, Purpose", "tags": "writing", "date": "2022-02-23 00:00:00 +0100", "snippet": "By the time most of the developers feel like, that it would be really cool, to share their thoughts online about the stuff they deal with every day.This happened to be the case with me too, so I sp...", "content": "By the time most of the developers feel like, that it would be really cool, to share their thoughts online about the stuff they deal with every day.This happened to be the case with me too, so I spinned up this little site, to have the platform to do this, and document some of these little stuff.I hope to have some more content on the site, but this post seems to be a good start." } ]
